// This file was generated by Dashcode from Apple Computer, Inc.
// You may edit this file to customize your Dashboard widget.

function load()
{
	setupParts();
}

function remove()
{
	// your widget has just been removed from the layer
	// remove any preferences as needed
	// widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

function hide()
{
	// your widget has just been hidden stop any timers to
	// prevent cpu usage
}

function show()
{
	// your widget has just been shown.  restart any timers
	// and adjust your interface as needed
	
	loadWeather();
}

function showBack(event)
{
	// your widget needs to show the back

	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget)
		widget.prepareForTransition("ToBack");

	front.style.display="none";
	back.style.display="block";
	
	if (window.widget)
		setTimeout('widget.performTransition();', 0);
}

function showFront(event)
{
	// your widget needs to show the front

	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget)
		widget.prepareForTransition("ToFront");

	front.style.display="block";
	back.style.display="none";
	
	if (window.widget)
		setTimeout('widget.performTransition();', 0);
}

function loadWeather()
{
	xmlhttp = new XMLHttpRequest();
	// http://www.nws.noaa.gov/cgi-bin/mos/getmav.pl?sta=KOKV
	xmlhttp.open("GET", "http://www.mikeash.com/tmp/weather.html", true);
	xmlhttp.onreadystatechange = function()
	{
		if(xmlhttp.readyState == 4)
		{
			if(xmlhttp.status == 200)
			{
				var text = xmlhttp.responseText;
				var regex = new RegExp("<PRE>((.|\n)*)</PRE>", "i");
				var result = regex.exec(text);
				var weatherText = result[1];
				var results = parseWeather(weatherText);
				loadResults(results);
			}
			else
			{
				document.getElementById("tableBox").object.content.innerHTML = xmlhttp.responseText;
			}
		document.getElementById("loadingoverlay").style.display = "none";
		}
		else
		{
			document.getElementById("loadingoverlay").style.display = "block";
		}
	}
	
	document.getElementById("loadingoverlay").style.display = "block";
	xmlhttp.send();
}

function parseWeather(txt)
{
	var dict = new Array();
	var lines = txt.split("\n");
	for(i = 0; i < lines.length; i++)
	{
		var elements = / *(.*) */.exec(lines[i])[1].split(/ +/);
		if(elements.length >= 2)
		{
			var name = elements[0];
			var values = elements.slice(1, -1);
			
			dict[name] = values;
		}
	}
	return dict;
}

function ensureNumberStringLength(num, len)
{
	num = "" + num;
	while(num.length < len)
		num = "0" + num;
	return num;
}

function loadResults(weatherResults)
{
	var templateHTML = 	'';
	templateHTML +=		'<div align="center">';
	templateHTML +=		'<div id="time"></div>';
	templateHTML +=		'<canvas id="temp" class="tempcanvas" width="32" height="32"></canvas>';
	templateHTML +=		'<div id="temptext" class="temptext"></div>';
	templateHTML +=		'<canvas id="winddir" width="32" height="32"></canvas>';
	templateHTML +=		'<div id="winddirtext"></div>';
	templateHTML +=		'<div id="visibilitytext" class="visibilitytext"></div>';
	templateHTML +=		'<div id="cloudbasetext" class="cloudbasetext"></div>';
	templateHTML +=		'</div>';
	var tableBox = document.getElementById("tableBox");
	
	var hours = weatherResults["HR"];
	var tablestr = "<table class=\"weathertable\"><tr>";
	for(i = 0; i < hours.length; i++)
	{
		tablestr += "<td class=\"weathertablecell\"><div id=\"result" + i + "\">" + templateHTML + "</div></td>";
	}
	
	tableBox.object.content.innerHTML = tablestr;
	
	for(i = 0; i < hours.length; i++)
	{
		var cell = document.getElementById("result" + i);
		var minutes = ((hours[i] * 60) - new Date().getTimezoneOffset() + 24 * 60) % (24 * 60);
		var time = ensureNumberStringLength(minutes / 60, 2) + ensureNumberStringLength(minutes % 60, 2);
		cell.children.namedItem("time").innerHTML = time;
		
		var temp = weatherResults["TMP"][i];
		setTemp(cell.children.namedItem("temp"), temp);
		cell.children.namedItem("temptext").innerHTML = temp;
		
		var dir = weatherResults["WDR"][i];
		var speed = weatherResults["WSP"][i];
		setWind(cell.children.namedItem("winddir"), dir, speed);
		cell.children.namedItem("winddirtext").innerHTML = dir + "0" + speed;
		
		var vis = weatherResults["VIS"][i];
		var viselt = cell.children.namedItem("visibilitytext");
		if(vis > 6)
			vis = "+6";
		viselt.innerHTML = vis;
		
		var cloudbaseraw = weatherResults["CIG"][i];
		var cloudbasetext = cloudBaseText(cloudbaseraw);
		cell.children.namedItem("cloudbasetext").innerHTML = cloudbasetext;
	}
}

function setWind(elt, val, speed)
{
	var ctx = elt.getContext("2d");
	var width = elt.width;
	var height = elt.height;
	
	var origX = width / 2;
	var origY = height / 2;
	
	var maxlen = Math.min(width, height) / 2;
	var len = maxlen * speed / 20;
	len = Math.min(len, maxlen);
	len = Math.max(len, maxlen / 5);
	
	var arrowSize = len / 2;
	arrowSize = Math.max(arrowSize, maxlen / 5);
	
	var degrees = val * 10 + 90;
	
	ctx.strokeRect(0, 0, width, height);
	
	ctx.save();
	ctx.translate(origX, origY);
	ctx.rotate(degrees * Math.PI / 180);
	ctx.beginPath();
	ctx.moveTo(-len, 0);
	ctx.lineTo(len, 0);
	ctx.strokeStyle = "black";
	ctx.stroke();
	
	ctx.beginPath();
	ctx.moveTo(len, 0);
	ctx.lineTo(len - arrowSize, arrowSize / 2);
	ctx.lineTo(len - arrowSize, -arrowSize / 2);
	ctx.lineTo(len, 0);
	ctx.fillStyle = "black";
	ctx.fill();
	ctx.restore();
}

function setTemp(elt, val)
{
	var ctx = elt.getContext("2d");
	var width = elt.width;
	var height = elt.height;
	
	var rectH = val * height / 100;
	rectH = Math.max(rectH, 0);
	rectH = Math.min(rectH, height);
	
	ctx.fillStyle = "red";
	ctx.fillRect(0, height - rectH, width, height);
	ctx.strokeRect(0, 0, width, height);
}

function cloudBaseText(num)
{
	var array = [ "low", "low", "low", "5-10", "10-20", "20-30", "30-65", "65-120", "&infin;" ];
	return array[Math.min(num, array.length - 1)];
}

if (window.widget)
{
	widget.onremove = remove;
	widget.onhide = hide;
	widget.onshow = show;
}
